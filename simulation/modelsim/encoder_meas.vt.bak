// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/10/2016 19:41:44"
                                                                                
// Verilog Test Bench template for design : encoder_meas
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 10 ps/ 1 ps
module encoder_meas_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [16:0] ch_sgn_in;
reg ch_sync;
reg clk;
reg mcu_n_rst;
reg mcu_nrd;
reg mcu_rd_clk;
reg mcu_start;
reg [7:0] treg_ram_data;
// wires                                               
wire [7:0]  mcu_data;
wire mcu_end;
wire mcu_sync;
wire [19:0]  ram_addr;
wire [7:0]  ram_data;
wire ram_ncs;
wire ram_nrd;
wire ram_nwr;

// assign statements (if any)                          
assign ram_data = treg_ram_data;
encoder_meas i1 (
// port map - connection between master ports and signals/registers   
	.ch_sgn_in(ch_sgn_in),
	.ch_sync(ch_sync),
	.clk(clk),
	.mcu_data(mcu_data),
	.mcu_end(mcu_end),
	.mcu_n_rst(mcu_n_rst),
	.mcu_nrd(mcu_nrd),
	.mcu_rd_clk(mcu_rd_clk),
	.mcu_start(mcu_start),
	.mcu_sync(mcu_sync),
	.ram_addr(ram_addr),
	.ram_data(ram_data),
	.ram_ncs(ram_ncs),
	.ram_nrd(ram_nrd),
	.ram_nwr(ram_nwr)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end  

initial 
begin
	clk = 0;
	forever #0.5 clk = ~clk;
end

initial 
begin
#20 mcu_start=0
#20 mcu_start=1
#20 mcu_start=0
end
                                                  
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

